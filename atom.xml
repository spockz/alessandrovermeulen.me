<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alessandro Vermeulen]]></title>
  <link href="http://alessandrovermeulen.me/atom.xml" rel="self"/>
  <link href="http://alessandrovermeulen.me/"/>
  <updated>2015-09-03T09:16:27+00:00</updated>
  <id>http://alessandrovermeulen.me/</id>
  <author>
    <name><![CDATA[Alessandro Vermeulen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FinagleCon]]></title>
    <link href="http://alessandrovermeulen.me/2015/08/31/finaglecon/"/>
    <updated>2015-08-31T17:57:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2015/08/31/finaglecon</id>
    <content type="html"><![CDATA[<p>FinagleCon was held at TwitterHQ in San Francisco. It is refreshing to see a
nice working atmosphere with free food and drinks. Now for the contents.</p>

<p>Twitter’s RPC framework, Finagle, has been in production since <a href="http://vkostyukov.ru/slides/finch-101/?full#5">August
2010</a> and has over 140
contributors. In addition to Twitter, it has been adopted by many large
companies such as SoundCloud. Initially written in Java with FP constructs
(monads, maps, etc.) all over, it was soon after rewritten in Scala.</p>

<p>Finagle is based on three core concepts: Simplicity, Composability, and
Separation of Concerns. These concepts are shown through three primitive
building blocks:
<a href="https://twitter.github.io/util/docs/index.html#com.twitter.util.Future"><code>Future</code></a>,
<a href="https://twitter.github.io/finagle/docs/index.html#com.twitter.finagle.Service"><code>Service</code></a>,
and
<a href="https://twitter.github.io/finagle/docs/index.html#com.twitter.finagle.Filter"><code>Filter</code></a>.</p>

<ul>
  <li><code>Future</code>s provide an easy interface to create asynchronous computation and
to model sequential or asynchronous data-flows.</li>
  <li><code>Service</code>s are functions that return futures, used to abstract away, possibly
remote, service calls.</li>
  <li><code>Filter</code>s are essentially decorators and are meant to contain modular blocks
of re-usable, non-business logic. Example usages are <a href="https://twitter.github.io/finagle/docs/index.html#com.twitter.finagle.filter.LoggingFilter">LoggingFilter</a> and
<a href="https://twitter.github.io/finagle/docs/index.html#com.twitter.finagle.service.RetryingFilter">RetryingFilter</a>.</li>
</ul>

<p>The use of Futures makes it easy to test asynchronous computations. Services and
filters both can be created separately, each containing their specialized logic.
This modularity makes it easy to test and reason about them separately. Services
and filters are easily composed, just like functions do, which makes it
convenient to test chains. Services and filters are meant to separate behaviour
from domain logic.</p>

<p>As amazing as Finagle is, there are some things one should be aware of. To
create a really resilient application with Finagle one has to be an expert in
its internals. Many configuration parameters influence each other, e.g. queue
size and time-outs. With a properly tuned setup Finagle is properly fast and
resilient (the defaults are good as well, mind you). As most data centres are
heterogenous in their setup, faster machines are added to the pool, and other
conditions change, one has to keep attention to the tuning continuously in order
to maintain optimal performance.</p>

<p>Some general advice, watch out for traffic amplification due to retries, keep
your timeouts low so retry is useful, but not as low that you introduce spurious
timeouts.</p>

<p>For extra points, keep hammering your application until it breaks, find out why
it breaks, fix it, and repeat.</p>

<h2 id="the-future">The future</h2>

<p>In addition to this heads up we were also given a nice insight in the upcoming
things for Finagle.</p>

<p>In order to make more informed decision, we will get a new Failure type which
contains more information instead of ‘just’ a <code>Throwable</code>. In this new
<code>Failure</code>, an added field indicates whether it is safe to <code>retry</code>.</p>

<p>There are several issues with the current way of fine-tuning Finagle, as
mentioned, you need to be an expert to use all the configuration parameters
properly. Next to this the configuration is static and doesn’t take into account
changing environments and behaviour of downstream services. Because the tuning
of the parameters is tightly coupled with the implementation of Finagle it is
also hard to change the implementation significantly without significant
re-tuning.</p>

<p>In order to battle the last two points, Finagle will introduce Service Level
Objectives (SLO). The SLO is a higher-level goal that Finagle should strive to
reach instead of low-level hardcoded parameters. What these SLO will be exactly
is not yet known.</p>

<h2 id="the-community">The community</h2>

<p>The Finagle team will synchronize the internal Finagle repository with the
Github repository every Monday. They will strive to publish a snapshot version
of the change as well.</p>

<p>For someone looking to write his own protocol to connect to his service,
<code>finagle-serial</code> is a nice project to start with. It is small enough to grasp
within a day but big enough to be non-trivial.</p>

<p>It was found that the
<a href="http://blog.ragozin.info/2012/03/secret-hotspot-option-improving-gc.html">ParGCCardsPerStrideChunk</a>
garbage collection option, available from 7u40, can halve GC times on large
heaps. It is recommended to try this parameter. Tuning seems to be hard to do
and is generally done by copying a ‘known good set’ of parameters.</p>

<p><a href="http://twitter.github.io/scrooge/">Scrooge</a> is a good utility to use for Thrift
and Scala as it is aware of Scala features such as Traits and Objects and can
generate relevant transformations for them.</p>

<p>When you want to connect to multiple data-centres from a single data-centre one
can use
<a href="https://twitter.github.io/finagle/docs/index.html#com.twitter.finagle.client.LatencyCompensation$">LatencyCompensation</a>
to include latency times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orchestration support announced on DockerCon]]></title>
    <link href="http://alessandrovermeulen.me/2014/12/04/orchestration-support-announced-on-dockercon/"/>
    <updated>2014-12-04T21:46:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2014/12/04/orchestration-support-announced-on-dockercon</id>
    <content type="html"><![CDATA[<h1 id="orchestration">Orchestration</h1>

<p>The philosophy behind docker is that in order to be solved, a large problem has to be divided into its root problems. One can then proceed by solving every one of these problems step by step. Additionally all elements of the solution need to communicate through a common app.</p>

<p>Docker has always been a tool with a single purpose: the creating, transport, and running of images. Until today there where several issues with docker that make using it somewhat trying at times. It lacked in capabilities for orchestration which is categorized by:</p>

<ol>
  <li>Installation of a docker host from scratch;</li>
  <li>Clustering of multiple docker hosts to spread resource utilization over the cluster;</li>
  <li>Managing inter-container dependencies at runtime.</li>
</ol>

<p>Today this changed as Docker Inc. announced a new set of tools.</p>

<h2 id="provisioning-machine">Provisioning: Machine</h2>

<p>Machine provides a one step installer for creating a new docker host on your local machine, a publicly hosted cloud, or a private cloud. It will automatically provision a new machine and set the environment variables such that any following docker command runs on the newly created host. This is very similar to what boot2docker provides.</p>

<p>There are several engines for provisioning in different platforms such as:</p>

<ul>
  <li>VirtualBox</li>
  <li>VMWare</li>
  <li>AWS</li>
  <li>Microsoft Hypervisor</li>
  <li>etc. (todo link)</li>
</ul>

<p>More information can be found at <a href="https://github.com/docker/machine">github</a>.</p>

<h2 id="clustering-swarm">Clustering: Swarm</h2>

<p>Ideally you want to control a cluster of docker hosts with the same interface as you control a single host. In other words the interface needs to be transparent or standardized. With swarm you can.</p>

<p>All existing commands on docker work with the swarm as well. Just point your docker binary to the swarm proxy and you are controlling the cluster instead of one single machine. Swarm is location/data center aware and also incorporates resource management. The default strategy is to use as little hosts as possible. The strategy places several lighter containers on the same node in order to reserve other nodes for heavier containers.</p>

<p>The main features are:</p>

<ol>
  <li>Resource management</li>
  <li>Scheduling honoring constraints</li>
  <li>Health checks on the cluster and nodes</li>
  <li>Supporting the entire docker interface</li>
</ol>

<p>Additionally Mesos can be used to provide the scheduling. Docker Inc. also announced that Mesos will be a first class citizen in Docker. The goal is to be able to run docker containers along side other Mesos jobs in the Mesos cluster.</p>

<p>More information also on <a href="https://github.com/docker/swarm">github</a>.</p>

<p>It appears that swarm is not supported yet by machine, sadly.</p>

<h3 id="managing-inter-container-dependencies-composer">Managing inter-container dependencies: Composer</h3>

<p>Setting up applications that require multiple containers to function correctly is difficult. Keeping them running is even harder. Docker proposes the <code>Docker Composer</code>.</p>

<p>Traditionally it ran on one single machine and, until today, orchestration needed to be done manually or through external tools.</p>

<h1 id="docker-hub">Docker Hub</h1>

<p>Docker Inc. also announces an enterprise version of the Docker Hub. It is able to run wherever the enterprise needs it to run and comes with safe 1-click upgrades. Enterprises are adopting containers as development is up to 30 times faster with halve the error rate.</p>

<p>Some fun facts:</p>

<ul>
  <li>100000 contributors to docker hub</li>
  <li>157 TB of data transmitted each month</li>
  <li>50 TB of data stored</li>
</ul>

<p>The timeline for 2015:</p>

<ol>
  <li>Increase performance of pulls</li>
  <li>Increase transparancy by adding and improving on status pages</li>
  <li>Engage in partnership with Microsoft. Most notably this will result being able to run Linux on Microsoft Azure.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on the Advanced Akka course]]></title>
    <link href="http://alessandrovermeulen.me/2014/07/15/notes-on-the-advanced-akka-course/"/>
    <updated>2014-07-15T12:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2014/07/15/notes-on-the-advanced-akka-course</id>
    <content type="html"><![CDATA[<p>The Advanced Akka course is provided by Typesafe and is aimed at teaching advanced usages of Akka. The course covers the basics of Akka, Remoting, Clustering, Routers, CRDTs, Cluster Sharding and Akka Persistance. The following post starts with a general introduction to Akka and presents the takeaways from the course as we experienced them.</p>

<h2 id="a-general-overview-of-akka">A general overview of Akka</h2>

<p>The reader which is already familiar with Akka can skip this section.</p>

<p>According to the Akka site this is Akka:</p>

<blockquote>
  <p>Akka is a toolkit and runtime for building highly 
concurrent, distributed, and fault tolerant event-driven
applications on the JVM.</p>
</blockquote>

<p>Akka achieves this by using Actors.</p>

<blockquote>
  <p>Actors are very lightweight concurrent entities. </p>
</blockquote>

<p>Each Actor has a corresponding mailbox stored separately from the Actor. The Actors together with their mailboxes reside in an ActorSystem. Additionally, the ActorSystem contains the Dispatcher which executes the handling of a message by an actor. Each Actor only handles a single message at a time.</p>

<p>In Akka everything is remote by design and philosophy. In practice this means that each Actor is identified by its <code>ActorRef</code>. This is a reference to the actor which provides <em>Location Transparency</em>.</p>

<p>Actors communicate with each other by sending messages to an another Actor through an <code>ActorRef</code>. This sending of the message takes virtually no time.</p>

<p>In addition to <code>ActorRef</code> there exists also an <code>ActorSelection</code> which contains a path to one or more actors. Upon each sending of the message the path is traversed until the actor is found or when not. No message is send back when the actor is not found however.</p>

<p>States: Started - Stopped - Terminated
If an actor enters the <code>Stopped</code> state it first stops its child actors before entering the <code>Terminated</code> state.</p>

<h3 id="best-practices">Best-practices</h3>

<p>Import the <code>context.dispatcher</code> instead of the global Scala ExecutionContext. It is the ExecutionContext managed by Akka. Using the global context causes the Actors to be run in the global Thread pool.</p>

<p>You should not use <code>PoisonPill</code> as it will be removed from future versions of Akka since it is not specific enough. Roll your own message to make sure the appropriate actions for graceful shutdown are done. Use <code>context.stop</code> to stop your actor.</p>

<p>Place your business logic in a separate trait and mix it in to the actor. This increases testability as you can easily unit test the trait containing the business logic. Also, you should put the creation of any child actors inside a separate method so the creation can be overridden from tests.</p>

<h2 id="remoting">Remoting</h2>
<p>With the Remoting extension it is possible to communicate with other Actor Systems. This communication is often done through <code>ActorSelection</code>s instead of <code>ActorRef</code>.</p>

<p>Remoting uses Java serialisation by default which is slow and fragile in light of changing definitions. It is possible and recommended to use another mechanism such as Google Protobuf.</p>

<h2 id="clustering">Clustering</h2>
<p>Akka has a simple perspective on cluster management with regards to split-brain scenarios. Nodes become dead when they are observed as dead and they cannot resurrect. The only way a node can come up again is if it registers itself again.</p>

<p>When a net split happens the other nodes are marked as <em>unreachable</em>. When using a Singleton, this means that only the nodes that can reach the singleton will access it. The others will not decide on a new Singleton in order to prevent a split-brain scenario.</p>

<p>Another measure against split-brain is contacting the seed nodes in order. The first seed node is required to be up.</p>

<p>The seed nodes are tried in order.</p>

<h2 id="fsm">FSM</h2>
<p>There is an library for writing finite state machines called FSM. For larger actors it can be useful to use the FSM. Otherwise stick to pure <code>become</code> and <code>unbecome</code>.</p>

<p>FSM also has an interval timer for scheduling messages. However, the use of <code>stay()</code> resets the interval timer therefore you could have issues with never executing what is at the end of the timer.</p>

<h2 id="routers">Routers</h2>

<p>There are two different kinds of routers: Pools and Groups. Pools are in charge of their own children and they are created and killed by the pool. Groups are configured with an <code>ActorSelection</code> that defines the actors to which the group should sent its messages. There are several implementations: Consistent Hash, Random, Round Robin, BroadCast, Scatter - Gather First, and Smallest Mailbox. The names are self-explanatory.</p>

<h2 id="synchronisation-of-data-with-crdts">Synchronisation of data with CRDTs</h2>
<p>Synchronising data between multiple nodes can be done by choosing your datatype so that If the timestamps and events are generated in one place no duplicate entries occur. Therefore merging a map from a different node in your map is easily done by copying entries you don’t already have to your own data.</p>

<p>This can be implemented by letting each member node broadcast which data-points they have. Each node can then detect which information is lacking and request the specific data from the node that claimed to have the data. At some future point in time all nodes will be in sync. This is called <em>eventual consistency</em>.</p>

<h2 id="singleton">Singleton</h2>
<p>If you have a singleton cluster manager proxy it only starts when the cluster is formed. A cluster is formed if a member connects. The proxy will then pass on the buffered messages.</p>

<h2 id="cluster-sharding">Cluster Sharding</h2>
<p>Sharding is a way to split up a group of actors in a cluster. This can be useful if the group is too large to fit in the memory of a single machine. The Cluster Sharding feature takes care of the partitioning of the actors using a hash you have to define with a function <code>shardResolver</code>. The sharded actors can be messaged with an unique identifier using <code>ClusterSharding(system).shardRegion("Counter")</code> which proxies the message to the correct actor.
<code>ClusterSharding.start</code> is what the Manager is to Singletons.</p>

<p>It is recommended to put the sharding functions into a singleton object for easy re-use of your shards, containing the functions to start the sharding extension and proxy to the shard etc. It is also convenient to adds <code>tell</code> and <code>initialise</code> helper functions to respectively send a message and initialise the actor by its unique id.</p>

<h2 id="akka-persistence">Akka Persistence</h2>

<p>Akka persistence uses a Journal to store which messages were processed. One of the supported storage mechanisms is Cassandra. It is also possible to use a file-based journal which, of course, is not recommended.</p>

<p>In the current version of Akka there are two approaches to persistence: command sourcing and event sourcing. Simply but, in command storing each message is first persisted and then offered to the actor to do as it pleases whereas in event sourcing only the results of actions are persisted. The latter is preferred and will be the only remaining method in following versions.</p>

<p>Both methods support storing a snapshot of the current state and recovering from it.</p>

<h3 id="command-sourcing">Command Sourcing</h3>
<p>The main problem with command sourcing lies in that <em>all</em> messages are replayed. This includes requests for information from dead actors which wastes resources for nothing. Moreover, in case of errors, the last message that killed the actor is also replayed and probably killing the actor again in the proces.</p>

<h3 id="event-sourcing">Event Sourcing</h3>

<p>With event sourcing one only stores state changing events. Events are received by the <code>receiveRecover</code> method. <em>External</em> side-effects should be performed in the <code>receive</code> method. The code for the internal side-effect of the event should be the same in both the <code>receive</code> and <code>receiveRecover</code> methods. The actor or trait for this will be named <code>PersistentActor</code>. </p>

<h3 id="actor-offloading">Actor offloading</h3>

<p>One can use Akka Persistence to “pause” long living actors, e.g. actors that have seen no activity lately. This frees up memory. When the actor is needed again it can be safely restored from the persistence layer.</p>

<h2 id="tidbits">Tidbits</h2>

<p>Akka 3 is to be released “not super soon”. It will contain typed actors. The consequence of this is that the sender field will be removed from the actor. Therefore, for request-response, the <code>ActorRef</code> should be added to the request itself.</p>

<h2 id="concluding">Concluding</h2>

<p>The Advanced Akka course gives a lot of insights and concrete examples of how to use the advanced Akka features of clustering, sharding and persisting data across multiple nodes in order to create a system that really is highly available, resilient and scalable. It also touches on the bleeding edge functionalities, the ideas and concepts around it and what to expect next in this growing ecosystem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The difference between shallow and deep embedding]]></title>
    <link href="http://alessandrovermeulen.me/2013/07/13/the-difference-between-shallow-and-deep-embedding/"/>
    <updated>2013-07-13T23:06:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2013/07/13/the-difference-between-shallow-and-deep-embedding</id>
    <content type="html"><![CDATA[<p>Deep and shallow embedding are terms associated with Domain Specific Languages
(DSL). A DSL is  a language geared toward a specific domain. The <a href="http://www.graphviz.org/content/dot-language" target="_blank">dot language</a> is
an example of such a DSL for describing Graphs. Conceptually, a shallow
embedding captures the semantics of the data of the domain in a data type and
provides a <em>fixed</em> interpretation of the data, whereas a deep embedding goes
beyond this and captures the semantics of the operations on the domain enabling
<em>variable</em> interpretations.</p>

<p>We will illustrate this difference by embedding a simple expression language
with summation, multiplication and constants in
<a href="http://www.haskell.org">Haskell</a>. Haskell is especially well-suited for and
often used as a host language for embedded DSLs.</p>

<p>We express our language with the following interface. A type synonym <code>Exp</code> for
normal <code>Int</code>s and three separate functions representing summation,
multiplication, and constants.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">type</span> <span class="kt">Exp</span> <span class="ow">=</span> <span class="kt">Int</span>
</span><span class="line">
</span><span class="line"><span class="nf">plus</span>  <span class="ow">::</span> <span class="kt">Exp</span> <span class="ow">-&gt;</span> <span class="kt">Exp</span> <span class="ow">-&gt;</span> <span class="kt">Exp</span>
</span><span class="line"><span class="nf">times</span> <span class="ow">::</span> <span class="kt">Exp</span> <span class="ow">-&gt;</span> <span class="kt">Exp</span> <span class="ow">-&gt;</span> <span class="kt">Exp</span>
</span><span class="line"><span class="nf">const</span> <span class="ow">::</span> <span class="kt">Int</span>        <span class="ow">-&gt;</span> <span class="kt">Exp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We embedded the <em>data</em> of the domain in Haskell and provided functions for
construction of the  model and we can easily represent the calculation of an
expression as $4 + 6 * 8$ with the following lines of Haskell:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">val</span> <span class="ow">=</span> <span class="n">const</span> <span class="mi">4</span> <span class="p">`</span><span class="n">plus</span><span class="p">`</span> <span class="p">(</span><span class="n">const</span> <span class="mi">6</span> <span class="p">`</span><span class="n">times</span><span class="p">`</span> <span class="n">const</span> <span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The advantage of this embedding that calculating the value of our expression
is very fast. Other than the value we cannot determine anything else regarding
our expression. This becomes more problematic when we add variables to our
language.</p>

<p>We change our type to contain binding information and add two functions to
represent the assignment and usage of variables.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">type</span> <span class="kt">Exp</span> <span class="ow">=</span> <span class="p">([</span><span class="kt">String</span> <span class="err">⊨</span> <span class="kt">Int</span><span class="p">],</span> <span class="kt">Int</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">assign</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Exp</span>
</span><span class="line"><span class="nf">var</span>    <span class="ow">::</span> <span class="kt">String</span>        <span class="ow">-&gt;</span> <span class="kt">Exp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And in our naivity we can write the expression $x + 6 * 8$ as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">val</span> <span class="ow">=</span> <span class="n">var</span> <span class="s">&quot;x&quot;</span> <span class="p">`</span><span class="n">plus</span><span class="p">`</span> <span class="p">(</span><span class="n">const</span> <span class="mi">6</span> <span class="p">`</span><span class="n">times</span><span class="p">`</span> <span class="n">const</span> <span class="mi">8</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Obviously, evaluating this creates havoc! What is the value of <code>x</code>? We should,
of course, have introduced it first:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">val</span> <span class="ow">=</span> <span class="kr">let</span> <span class="s">&quot;x&quot;</span> <span class="mi">4</span> <span class="p">(</span><span class="n">var</span> <span class="s">&quot;x&quot;</span> <span class="p">`</span><span class="n">plus</span><span class="p">`</span> <span class="p">(</span><span class="n">const</span> <span class="mi">6</span> <span class="p">`</span><span class="n">times</span><span class="p">`</span> <span class="n">const</span> <span class="mi">8</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we have assigned a value to <code>x</code> and we can safely use it in our
expression.</p>

<p>Had we used a deep embedding we could have prevented the cataclysmic error by
first checking whether each variable is assigned before it is used. We create
a deep embedding of our expression by using a Haskell data type.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">Exp</span> <span class="kr">where</span>
</span><span class="line">  <span class="kt">Plus</span>   <span class="ow">::</span> <span class="kt">Exp</span> <span class="ow">-&gt;</span> <span class="kt">Exp</span>    <span class="ow">-&gt;</span> <span class="kt">Exp</span> <span class="c1">-- plus</span>
</span><span class="line">  <span class="kt">Times</span>  <span class="ow">::</span> <span class="kt">Exp</span> <span class="ow">-&gt;</span> <span class="kt">Exp</span>    <span class="ow">-&gt;</span> <span class="kt">Exp</span> <span class="c1">-- times</span>
</span><span class="line">  <span class="kt">Const</span>  <span class="ow">::</span> <span class="kt">Int</span>           <span class="ow">-&gt;</span> <span class="kt">Exp</span> <span class="c1">-- const</span>
</span><span class="line">  <span class="kt">Assign</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Exp</span> <span class="c1">-- assign</span>
</span><span class="line">  <span class="kt">Var</span>    <span class="ow">::</span> <span class="kt">String</span>        <span class="ow">-&gt;</span> <span class="kt">Exp</span> <span class="c1">-- var</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that we do not specify <em>how</em> the bindings should be stored, only that
such a thing exists. We now define a function that checks whether we use a
variable before it is defined.<sup id="fnref:folds"><a href="#fn:folds" class="footnote">1</a></sup></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">useBeforeDefine</span> <span class="ow">::</span> <span class="kt">Exp</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class="line"><span class="nf">useBeforeDefine</span> <span class="n">e</span> <span class="ow">=</span> <span class="n">f</span> <span class="kt">[]</span>
</span><span class="line">  <span class="kr">where</span>
</span><span class="line">  <span class="n">f</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Exp</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class="line">  <span class="n">f</span> <span class="p">(</span><span class="kt">Plus</span>  <span class="n">l</span> <span class="n">r</span><span class="p">)</span> <span class="n">env</span>      <span class="ow">=</span> <span class="n">useBeforeDefine</span> <span class="n">l</span> <span class="n">env</span> <span class="o">||</span> <span class="n">useBeforeDefine</span> <span class="n">r</span> <span class="n">env</span>
</span><span class="line">  <span class="n">f</span> <span class="p">(</span><span class="kt">Times</span> <span class="n">l</span> <span class="n">r</span><span class="p">)</span> <span class="n">env</span>      <span class="ow">=</span> <span class="n">useBeforeDefine</span> <span class="n">l</span> <span class="n">env</span> <span class="o">||</span> <span class="n">useBeforeDefine</span> <span class="n">r</span> <span class="n">env</span>
</span><span class="line">  <span class="n">f</span> <span class="p">(</span><span class="kt">Const</span> <span class="kr">_</span><span class="p">)</span>   <span class="kr">_</span>        <span class="ow">=</span> <span class="kt">False</span>
</span><span class="line">  <span class="n">f</span> <span class="p">(</span><span class="kt">Assign</span> <span class="n">var</span> <span class="kr">_</span> <span class="n">e</span><span class="p">)</span> <span class="n">env</span> <span class="ow">=</span> <span class="n">useBeforeDefine</span> <span class="n">e</span> <span class="p">(</span><span class="n">var</span> <span class="kt">:</span> <span class="n">env</span><span class="p">)</span>
</span><span class="line">  <span class="n">f</span> <span class="p">(</span><span class="kt">Var</span> <span class="n">var</span><span class="p">)</span>        <span class="n">env</span> <span class="ow">=</span> <span class="n">not</span> <span class="p">(</span><span class="n">var</span> <span class="p">`</span><span class="n">elem</span><span class="p">`</span> <span class="n">env</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With the function above we can <em>check</em> whether an expression is well-formed.
With our deep embedding we can even define transformations of our expression;
e.g. differentiate with respect to a variable.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">diff</span> <span class="ow">::</span> <span class="kt">Exp</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Exp</span>
</span><span class="line"><span class="nf">diff</span> <span class="p">(</span><span class="kt">Plus</span>  <span class="n">l</span> <span class="n">r</span><span class="p">)</span> <span class="n">dx</span>      <span class="ow">=</span> <span class="n">diff</span> <span class="n">l</span> <span class="n">dx</span> <span class="p">`</span><span class="kt">Plus</span><span class="p">`</span> <span class="n">diff</span> <span class="n">r</span> <span class="n">dx</span>
</span><span class="line"><span class="nf">diff</span> <span class="p">(</span><span class="kt">Times</span> <span class="n">l</span> <span class="n">r</span><span class="p">)</span> <span class="n">dx</span>      <span class="ow">=</span> <span class="p">(</span><span class="n">diff</span> <span class="n">l</span> <span class="n">dx</span> <span class="p">`</span><span class="kt">Times</span><span class="p">`</span> <span class="n">r</span><span class="p">)</span> <span class="p">`</span><span class="kt">Plus</span><span class="p">`</span> <span class="p">(</span><span class="n">l</span> <span class="p">`</span><span class="kt">Times</span><span class="p">`</span> <span class="n">diff</span> <span class="n">r</span> <span class="n">dx</span><span class="p">)</span>
</span><span class="line"><span class="nf">diff</span> <span class="p">(</span><span class="kt">Const</span> <span class="kr">_</span><span class="p">)</span>   <span class="kr">_</span>       <span class="ow">=</span> <span class="kt">Const</span> <span class="mi">0</span>
</span><span class="line"><span class="nf">diff</span> <span class="p">(</span><span class="kt">Assign</span> <span class="n">var</span> <span class="n">x</span> <span class="n">e</span><span class="p">)</span> <span class="n">dx</span> <span class="ow">=</span> <span class="kt">Assign</span> <span class="n">var</span> <span class="n">x</span> <span class="p">(</span><span class="n">diff</span> <span class="n">e</span> <span class="n">dx</span><span class="p">)</span>
</span><span class="line"><span class="nf">diff</span> <span class="p">(</span><span class="kt">Var</span> <span class="n">var</span><span class="p">)</span>        <span class="n">dx</span> <span class="o">|</span> <span class="n">var</span> <span class="o">==</span> <span class="n">dx</span> <span class="ow">=</span> <span class="kt">Const</span> <span class="mi">1</span>
</span><span class="line">                         <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kt">Const</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Deep embedding allows us to utilize the semantics of our model by defining
multiple interpretations of our DSL. The downside is that just calculating the
value of our expression has become slower due to the added overhead of the
constructors, whereas the shallow embedding can be evaluated by only using
<code>Int</code>s.</p>

<p>In short:</p>

<ul>
  <li><strong>Shallow embedding</strong> should be used when you only need a single interpretation or
when you are in a hurry.</li>
  <li><strong>Deep embedding</strong> should be used in all other cases.</li>
</ul>

<p>More reading material on this subject:</p>

<ul>
  <li>This <a href="http://www.cse.chalmers.se/~josefs/DSLTutorial/tutorialSlides.html">presentation</a> by Josef Svenningsson.</li>
  <li><a href="http://www.cse.chalmers.se/~josefs/publications/TFP12.pdf">Combining Deep and Shallow Embedding for EDSL</a> (Josef Svenningsson and Emil Axelsson, 2012)</li>
  <li><a href="https://www4.in.tum.de/~nipkow/pubs/tphols04.html">Certifying Machine Code Safety: Shallow versus Deep Embedding</a> (Martin Wildmoser and Tobias Nipkow, 2004)</li>
  <li><a href="http://cstheory.stackexchange.com/questions/1370/shallow-versus-deep-embeddings">Deep versus Shallow embeddings in Coq</a></li>
</ul>

<div class="footnotes">
  <ol>
    <li id="fn:folds">
      <p>Most often you should use <a href="http://alessandrovermeulen.me/2009/12/17/haskell-datatypes-and-folds/">folds</a> (<a href="http://alessandrovermeulen.me/2010/01/03/haskell-datatypes-and-folds-part-ii/">2</a>) instead of this direct recursion. <a href="#fnref:folds" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combining graphviz (dot) and TikZ with dot2tex]]></title>
    <link href="http://alessandrovermeulen.me/2013/07/08/combining-graphviz-dot-and-tikz-with-dot2tex/"/>
    <updated>2013-07-08T23:06:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2013/07/08/combining-graphviz-dot-and-tikz-with-dot2tex</id>
    <content type="html"><![CDATA[<p>We all want to create good looking documents and good looking documents need
good looking images. Because we want consistency and because we are lazy we
want to do this as automatic as possible. That is why we use <span>L<span style="text-transform: uppercase; font-size: 70%; margin-left: -0.36em; vertical-align: 0.3em; line-height: 0; margin-right: -0.15em;">a</span>T<span style="text-transform: uppercase; margin-left: -0.1667em; vertical-align: -0.5ex; line-height: 0; margin-right: -0.125em;">e</span>X</span>,
it creates beautifully typeset documents without much manual effort.</p>

<p>Similarly, we use graphviz to generate our graphs for us. It’s automatic layout is the best in the
field and the (<a href="2013/05/19/why-you-should-switch-to-declarative-programming/">declarative</a>) dot language is easy to understand and compact to write. We can either include the PDFs dot generated in our document by using <code>\includegraphics</code> or we could use the latex <a href="https://github.com/mprentice/GraphViz-sty">graphviz package</a>, remember that we are lazy. We can easily get
the image in <a href="#example1">our first example</a> in our PDF.</p>

<div class="bogus-wrapper"><notextile><figure id="example1">
	<img src="http://farm8.staticflickr.com/7313/9243796534_60bb926e44_o.png" width="563" height="155" alt="Image with graphviz" />
	<figcaption><strong>Figure 1.</strong> Example of an image generated by Graphviz/dot</figcaption>
</figure></notextile></div>

<p>There is a shadow side to using Graphviz/dot as well. There are two problems.
Firstly, the image just looks a bit out of place around the nicely smoothed
text in a PDF. Secondly, we lack the ability to use TeX code in our graph.
This means we are limited to the formatting by dot and the graphs could
therefore appear out of style with other figures in our document.</p>

<p>No worries, with TikZ it is possible to create very fancy graphs and images in
general but you have to all the positioning manually! Imagine inserting a node
and having to reorder everything!</p>

<p>Enter <a href="http://www.fauskes.net/code/dot2tex/">dot2tex</a> it brings all the love
of graphviz/dot to TeX/TikZ. Using dot2tex has many advantages:</p>

<ol>
  <li>Lets you write your graphs in familiar dot syntax;</li>
  <li>Let dot – or whichever layout engine you prefer – determine the placement of
your nodes and arrows;</li>
  <li>Style your nodes however you want by using TikZ styles;</li>
  <li>Optionally, fine-tune the graph by adding extra tikz drawings.</li>
</ol>

<p>Rather than manually calling dot2tex for every dot file you have please use
the <a href="http://www.ctan.org/pkg/dot2texi">dot2texi package</a>. This is the interface to dot2tex and when used as follows generates the image as displayed in <a href="#example2">Figure 2</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line">  <span class="k">\begin</span><span class="nb">{</span>tikzpicture<span class="nb">}</span>[&gt;=latex&#39;,scale=0.5]
</span><span class="line">    <span class="c">% set node style</span>
</span><span class="line">
</span><span class="line">    <span class="k">\begin</span><span class="nb">{</span>dot2tex<span class="nb">}</span>[dot,tikz,codeonly,styleonly,options=-s -tmath]
</span><span class="line">        digraph G  <span class="nb">{</span>
</span><span class="line">            node [style=&quot;n&quot;];
</span><span class="line">            p [label=&quot;+&quot;];
</span><span class="line">            t [texlbl=&quot;<span class="k">\LaTeX</span>&quot;];
</span><span class="line">            6
</span><span class="line">            8
</span><span class="line">            10-&gt; p;
</span><span class="line">            6 -&gt; t;
</span><span class="line">            8 -&gt; t;
</span><span class="line">            t -&gt; p;
</span><span class="line">            <span class="nb">{</span>rank=same; 10;6;8<span class="nb">}</span>
</span><span class="line">        <span class="nb">}</span>
</span><span class="line">    <span class="k">\end</span><span class="nb">{</span>dot2tex<span class="nb">}</span>.
</span><span class="line">    <span class="k">\begin</span><span class="nb">{</span>pgfonlayer<span class="nb">}{</span>background<span class="nb">}</span>
</span><span class="line">        <span class="k">\draw</span><span class="na">[rounded corners,fill=blue!20]</span> (6.north west) -- (8.north east) -- (t.south east)--cycle;
</span><span class="line">    <span class="k">\end</span><span class="nb">{</span>pgfonlayer<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>tikzpicture<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure id="example2">
	<img src="http://farm4.staticflickr.com/3804/9241070475_9d48236aa7_o.png" width="430" height="410" alt="Example of TeX typesetting + TikZ background" />
	<figcaption><strong>Figure 2.</strong> Example of TeX typesetting + TikZ background</figcaption>
</figure></notextile></div>

<p>For more TikZ goodness check out the <a href="http://www.texample.net/tikz/examples/">example site</a>.</p>

<p>Happy writing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should switch to declarative programming]]></title>
    <link href="http://alessandrovermeulen.me/2013/05/19/why-you-should-switch-to-declarative-programming/"/>
    <updated>2013-05-19T12:52:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2013/05/19/why-you-should-switch-to-declarative-programming</id>
    <content type="html"><![CDATA[<p>We are reaching limits of what is feasible with imperative languages and we should move to declarative languages. </p>

<p>When applications written in imperative languages grow, the code becomes convoluted. Why? Imperatively programmed applications contain statements such as <code>if X do Y else do Z</code>. As <code>Y</code> and <code>Z</code> contain <em>invisible</em> side-effects the correctness of the program relies on some implicit invariant. This invariant has to be maintained by the programmer or else the code will break. Thus each time a new feature is added to an application or a bug is fixed the code for the application gets more complex as keeping the invariant intact becomes harder. After a while the code becomes spaghetti-code and bugs are introduced as the programmer fails to maintain the invariant. This is going to happen despite the best intentions of the programmer to keep things clean. Why is this? </p>

<!-- more -->

<p>An imperative language is a type of language that tells the computer what to do and in which order. However, most, if not all, applications are nothing but a translation of some business domain into a computer program. In order to get the imperative code the programmer has to translate the business model to a set of imperative instructions, the business logic. The imperative instructions bear little resemblance to the original description of the business model. When the business model changes the imperative counterpart could change entirely but what happens is that programmers make incremental updates to the code. This is done because either they do not see that a more drastic change is necessary or because they are under pressure to deliver results. Over time this leads to bugs and unmaintainable code. Summarized, bugs are introduced because there is a manual translation step between the business model and the program code.</p>

<p>Imagine a system for calculating whether a person should receive a certain allowance. To receive the allowance a person has to meet several criteria such as <code>age &gt; 18 and income &lt; 2400</code>. We can denote this in the following way:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">receives_allowance?</span><span class="p">(</span><span class="n">age</span><span class="p">,</span> <span class="n">income</span><span class="p">)</span>
</span><span class="line">  <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">18</span> <span class="o">&amp;&amp;</span> <span class="n">income</span> <span class="o">&lt;</span> <span class="mi">2400</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are several remarks to be made for this code. Adding a criteria such as marital status would involve adding a parameter to the function and changing the boolean expression. We could already avoid having to change parameters when we had chosen a parameter of type Person that contains the information about a person. But what if we would introduce time as an aspect in our criteria? We need to change the function again. And what if the age criteria changed? If the programmer erroneously codes something like <code>age &gt; 18 &amp;&amp; age &lt; 18</code> into the condition we would only find the bug during testing, if we are lucky. Additionally when our criteria become more complex we would like to extract criteria to their own functions. In short, it is easy to make mistakes this way.</p>

<p>A solution to this is to avoid the translation process by using a declarative language. A declarative language is a language that describes <em>what</em> is to be computed but not <em>how</em> it should be computed.<sup id="fnref:declarativereference"><a href="#fn:declarativereference" class="footnote">1</a></sup> In essence: it omits control-flow. By encoding and thereby recording the business model into a set of declarative statements it becomes easier to spot irregularities in the business logic as the business logic reads more like the description of the business model and all invariants are <em>visible</em>. In this manner the programmer no longer tells the computer how to perform a computation but rather what the computation should be. This makes it easier to maintain </p>

<p>However, we take it even to an higher level entirely. By just using the declarative language, such as Haskell or Prolog, you are still using a general-purpose language and are thus lacking domain specific checks. It would be advantageous to devise a Domain Specific Language (DSL) instead. This would be a language specifically geared towards your business domain and can be done easily in a language such as Haskell. Creating a DSL has a great benefit: Because the business domain is written down in code the responsibility of translating the business domain into a program shifts from the programmer to the interpreter of the DSL. This has two benefits: the translation is consolidated in one single point (the interpreter) and can be verified or even proven to be correct. It could be checked that no contradicting statements are present. In this sense we can compare the validation to a spell-checker or JSLint but for our specific domain. Secondly the programmer cannot make mistakes in the translation of the business logic to imperative code.</p>

<p>A simple DSL embedding the idea of the allowance could look like the text in the examples below. The interpreter / compiler is able to inspect the separate rules and check whether they would cause a tautology or contradiction.</p>

<p>We will illustrate this with some examples. Consider the following text below, it is easy to read and it is clear what it means. Each line is a condition that has to hold, so we could read an “AND” at eacht line end. <small>(Whether Income is monthly or annually or weekly is not taken into account here but you get the picture.)</small></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">an</span> <span class="n">adult</span> <span class="k">when</span> <span class="n">his</span> <span class="no">Age</span> <span class="n">is</span> <span class="no">GREATER</span> <span class="no">THAN</span> <span class="no">OR</span> <span class="no">EQUAL</span> <span class="no">TO</span> <span class="mi">18</span>
</span><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">allegeable</span> <span class="k">for</span> <span class="n">an</span> <span class="n">allowance</span> <span class="no">IF</span>
</span><span class="line">  <span class="n">he</span> <span class="n">is</span> <span class="n">an</span> <span class="n">adult</span>
</span><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">allegeable</span> <span class="k">for</span> <span class="n">an</span> <span class="n">allowance</span> <span class="no">IF</span>
</span><span class="line">  <span class="n">his</span> <span class="no">Income</span> <span class="n">is</span> <span class="no">NOT</span> <span class="no">GREATER</span> <span class="no">THAN</span> <span class="err">€</span><span class="mi">2400</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When we would add a rule as shown below, we could get a warning or error from the interpreter telling us that we have two different conditions on a person’s age.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">an</span> <span class="n">adult</span> <span class="k">when</span> <span class="n">his</span> <span class="no">Age</span> <span class="n">is</span> <span class="no">GREATER</span> <span class="no">THAN</span> <span class="no">OR</span> <span class="no">EQUAL</span> <span class="no">TO</span> <span class="mi">18</span>
</span><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">allegeable</span> <span class="k">for</span> <span class="n">an</span> <span class="n">allowance</span> <span class="no">IF</span>
</span><span class="line">  <span class="n">he</span> <span class="n">is</span> <span class="n">an</span> <span class="n">adult</span>
</span><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">allegeable</span> <span class="k">for</span> <span class="n">an</span> <span class="n">allowance</span> <span class="no">IF</span>
</span><span class="line">  <span class="n">his</span> <span class="no">Income</span> <span class="n">is</span> <span class="no">NOT</span> <span class="no">GREATER</span> <span class="no">THAN</span> <span class="err">€</span><span class="mi">2400</span>
</span><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">allegeable</span> <span class="k">for</span> <span class="n">an</span> <span class="n">allowance</span> <span class="no">IF</span>
</span><span class="line">  <span class="n">his</span> <span class="no">Age</span> <span class="n">is</span> <span class="no">GREATER</span> <span class="no">THAN</span> <span class="mi">21</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And when we would add a rule as this it could warn us that no-one will ever get an allowance.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">an</span> <span class="n">adult</span> <span class="k">when</span> <span class="n">his</span> <span class="no">Age</span> <span class="n">is</span> <span class="no">GREATER</span> <span class="no">THAN</span> <span class="no">OR</span> <span class="no">EQUAL</span> <span class="no">TO</span> <span class="mi">18</span>
</span><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">allegeable</span> <span class="k">for</span> <span class="n">an</span> <span class="n">allowance</span> <span class="no">IF</span>
</span><span class="line">  <span class="n">he</span> <span class="n">is</span> <span class="n">an</span> <span class="n">adult</span>
</span><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">allegeable</span> <span class="k">for</span> <span class="n">an</span> <span class="n">allowance</span> <span class="no">IF</span>
</span><span class="line">  <span class="n">his</span> <span class="no">Income</span> <span class="n">is</span> <span class="no">NOT</span> <span class="no">GREATER</span> <span class="no">THAN</span> <span class="err">€</span><span class="mi">2400</span>
</span><span class="line"><span class="n">A</span> <span class="n">person</span> <span class="n">is</span> <span class="n">allegeable</span> <span class="k">for</span> <span class="n">an</span> <span class="n">allowance</span> <span class="no">IF</span>
</span><span class="line">  <span class="n">his</span> <span class="no">Age</span> <span class="n">is</span> <span class="no">LESS</span> <span class="no">THAN</span> <span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Not only would the interpreter be able to spot these kinds of errors but it would also be easier for the writer of these rules to spot whether there is a mistake.
The astute reader will have noticed than we have not included any control flow into our language making it a declarative language.</p>

<p>Because the business-logic is now represented by the DSL it can be written by domain experts instead of the programmers of the application itself. The compiler can provide feedback when something is wrong in the DSL and there is less chance for errors in the implementation of the business logic. Additionally this frees the programmes for implementing better translations of the DSL or other projects saving time and other resources. </p>

<p>To summarise 4 reasons why you should switch to declarative languages:</p>

<ol>
  <li>Direct translation of the business model into business logic </li>
  <li>Better readability of the business logic</li>
  <li>Better scalability for the program in terms of functionality</li>
  <li>Less bugs</li>
</ol>

<p>And 3 reasons why you should use DSLs to boot:</p>

<ol>
  <li>Free up programmers to do important stuff</li>
  <li>Let the domain-experts handle the business logic and have it machine-checked!</li>
  <li>It is just awesome</li>
</ol>

<div class="footnotes">
  <ol>
    <li id="fn:declarativereference">
      <p><a href="ftp://clip.dia.fi.upm.es/pub/papers/PARFORCE/second_review/D.WP3.1.M2.3.ps.Z">Lloyd, J.W., Practical Advantages of Declarative Programming</a> <a href="#fnref:declarativereference" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software and Building Architecture Compared]]></title>
    <link href="http://alessandrovermeulen.me/2012/04/14/software-and-building-architecture-compared/"/>
    <updated>2012-04-14T14:05:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2012/04/14/software-and-building-architecture-compared</id>
    <content type="html"><![CDATA[<p>People tend to only understand what they can see. For most people it is
difficult to grasp more abstract matters without somehow visualizing them.
Software is an example of such an abstract matter. Let us visit the process of
developing software through a comparison with developing a building.</p>

<!-- more -->

<p>Everyone knows that in order to build something you will have to think about it
first. Just putting some sticks together as you did when you were playing
outside does not work very well for a skyscraper. For any construction you will
need an architecture to design it first. After your architect has designed the
project is has to go through some checks as to whether you will have enough
sunlight in the house, enough ventilation and perhaps most importantly that the
structure will not come down on itself! Ideally you only start building when
both the architect, the contractor and yourself are satisfied that the building
meets all requirements. Our knowledge on the construction of buildings has been
growing since we first exited our caves and thus we generally can found our
decisions during each step of the process on this knowledge.</p>

<p>Most people have not had the experience of just building some software that
eventually crashes because they did not think it through, it is not something
you do as a kid when playing outside. This makes things a bit more complicated
to imagine, but the development of software is quite analogous to the
development of some construction.</p>

<p>Coming up with a program is even more complicated than building a construction.
It comes with all the issues mentioned above when creating a building. It first
has to be designed, then it has to be passed along to someone leading the
developers to check for practicality and ideally usability. After that it can be
passed to the developers for the writing proper. The issue at hand being,
however, is that in the world of software wishes from the client and the
environment change continuously during the project. This causes an oscillation
between the stages mentioned above creating long delays before the final product
is finished. To make matters worse, the final product will not be the perfect
fit to the requirements due to the delays.</p>

<p>Why does this happen, you wonder? There are several reasons. For starters the
art of programming is still very young, learning from our mistakes. Even the
Romans had some mishaps when building their famous aqueducts. This entails that
we still lack the experience to found our design decisions on. Another reason is
that demands and wishes change rapidly in our new hyper-dynamic society. When
you set off on constructing a building you have a very good idea of why you want
to do that, what it will take and what your usage of the building will be.
Software projects are generally given less consideration.</p>

<p>A very contributing factor to the complexity of creating a software product is
the fact that most cases the software has to integrate ‘perfectly’ in the
physical process of the client, where most do not fully grasp their own process,
and that it has to communicate with other software products. These other
products might not be designed with the new scenario in mind and thus either
need adjustment or another way around it has to be found.</p>

<p>So, this is why coming up with a software product is just as difficult as
constructing a building, and is in most cases even harder. The next time someone
asks why it takes so long to write (good) software you just ask how long it took
to design his custom made house. :)</p>

<!-- Writing a program is quite complicated. It consists of many steps, most of which
are not even of a technical nature. It requires human interaction, figuring out
requirements and prioritizing them, scheduling of your resources (your
programmers), and continuous feedback to the client. Often you will have to deal
with changing requirements, either because the client decides he wants something
else, or because you discover edge cases when looking more closely at your
original requirements. Only after you have 

 

When people ask me what I do I answer them that I build software. These same
people often cannot grasp why building software is so difficult. I would like to
compare the development of a software product with the development of a
building.

Everyone knows that in order to build a house you first need to get the proper
permissions. After you have received the permission you can start designing your
house. In order to design you will need to know what kind of family will live in
the building, will they have kids, or is it a house for elderly people? What is
the environment the building will be build? Is it dry with soft ground or will
it be in a wet climate on hard rocks?

No grasp on the physical sense of software. Difficult to imagine/abstract. -->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JCU App installation script]]></title>
    <link href="http://alessandrovermeulen.me/2012/02/29/JCU-App-installation-script/"/>
    <updated>2012-02-29T18:17:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2012/02/29/JCU-App-installation-script</id>
    <content type="html"><![CDATA[<p>With this script it should be possible to install and build the JCU app in a
local directory. It does <em>not</em> build the UHC for you. If that is wanted the
option could be build in of course!</p>

<div><script src="https://gist.github.com/1902090.js?file="></script>
<noscript><pre><code></code></pre></noscript></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting rid of programming JavaScript with Haskell]]></title>
    <link href="http://alessandrovermeulen.me/2012/01/26/getting-rid-of-javascript-with-haskell/"/>
    <updated>2012-01-26T20:29:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2012/01/26/getting-rid-of-javascript-with-haskell</id>
    <content type="html"><![CDATA[<p>For my Experimentation Project at Utrecht University I ported the “JCU”
application to Haskell. The JCU application is used to give Dutch High school
students the opportunity to taste Prolog.</p>

<p>The project uses the Utrecht Haskell Compiler and its JavaScript backend. The UHC
translates Haskell to Core and then translates this Core language to JavaScript.
For more information on this see the blog of the creator of the 
<a href="http://utrechthaskellcompiler.wordpress.com/2010/10/18/haskell-to-javascript-backend/">UHC JavaScript backend</a>.</p>

<p>Please read my <a href="http://alessandrovermeulen.me/downloads/report-on-getting-rid-of-js.pdf">report</a> on this
project. The project is hosted on GitHub in the following repositories:</p>

<ul>
  <li><a href="https://github.com/spockz/JCU">JCU</a>,</li>
  <li><a href="https://github.com/spockz/uhc-jscript">uhc-jscript</a>,</li>
  <li><a href="https://github.com/spockz/NanoProlog">NanoProlog</a>, and</li>
  <li><a href="http://hackage.haskell.org/package/uu-tc">UU-TC</a>.</li>
</ul>

<p><a href="http://www.flickr.com/photos/spockz/6767517435/" title="Incomplete proof in the HS JCU App by Alessandro Vermeulen, on Flickr"><img src="http://farm8.staticflickr.com/7025/6767517435_b075d1c686_z.jpg" width="640" height="414" alt="Incomplete proof in the HS JCU App" /></a>
<a href="http://www.flickr.com/photos/spockz/6767517241/" title="Complete proof in the HS JCU App by Alessandro Vermeulen, on Flickr"><img src="http://farm8.staticflickr.com/7155/6767517241_eacd8ec0ed_z.jpg" width="640" height="414" alt="Complete proof in the HS JCU App" /></a></p>

<p><strong>update 28-01-2012</strong>:
The keyword <code>jscript</code> in the UHC has been changed to <code>js</code> in order to avoid 
association with <a href="http://en.wikipedia.org/wiki/JScript">Microsoft’s JScript</a>.
Also <code>new Object</code> syntax is now available in the <code>foreign import</code> directives.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">foreign</span> <span class="kr">import</span> <span class="nn">js</span> <span class="s">&quot;new Object()&quot;</span>
</span><span class="line">  <span class="n">newObject</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">JSPtr</span> <span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo's of the DMN Seniorenwedstrijd 21-01-2012 are now available]]></title>
    <link href="http://alessandrovermeulen.me/2012/01/23/photos-of-the-dmn-seniorenwedstrijd-21-01-2012-available/"/>
    <updated>2012-01-23T20:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2012/01/23/photos-of-the-dmn-seniorenwedstrijd-21-01-2012-available</id>
    <content type="html"><![CDATA[<p>The photo’s of the DMN Seniorenwedstrijd 21-01-2012 at Colijn Dance Masters are
now available. You can order them <a href="http://oypo.nl/pixxer.asp?id=B1835D91132DA171">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A transition to static site generation]]></title>
    <link href="http://alessandrovermeulen.me/2011/12/14/a-transition-to-static-site-generation/"/>
    <updated>2011-12-14T22:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2011/12/14/a-transition-to-static-site-generation</id>
    <content type="html"><![CDATA[<p>Today I’ve launched my new blog. It is based on <a href="http://octopress.org/docs">Octopress</a>
and works by statically generating the pages and then syncing them with the
server.</p>

<p>If you are for example on OS X Lion and installed XCode 4.2 and you run into
weird errors like a missing gcc-4.2, and Homebrew throws errors like this:</p>

<blockquote>
  <p>Error: The linking step did not complete successfully
The formula built, but is not symlinked into /usr/local</p>
</blockquote>

<p>Please install the gcc package from this nice fellow:
<a href="https://github.com/kennethreitz/osx-gcc-installer">osx-gcc-installer</a></p>

<p>And if you are getting nagged by <code>rb-fsevent</code>. Change</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>to </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span><span class="p">,</span> <span class="s2">&quot;0.9.0.pre4&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Update</strong>
The comments have been exported with the Wordpress plugin to Disqus. I’m
currently looking at how to highlight code within Disqus comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caching hackage]]></title>
    <link href="http://alessandrovermeulen.me/2011/11/13/caching-hackage/"/>
    <updated>2011-11-13T00:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2011/11/13/caching-hackage</id>
    <content type="html"><![CDATA[
<p>On several occasions I noticed that when performing a <code>cabal update</code> that the
index was being downloaded at the rate of plus min 300 KB/s. Finally I got around to do
something about this. I&#8217;ve set up a caching server located in Utrecht, The
Netherlands. It is a caching proxy for the hackage repository. If you want to
use it, add the following to your <code>~/.cabal/config</code> file. (Or equivalent on
Windows.)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">remote-repo: cache:http://spockz.nl:12080/packages/archive
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Be sure to comment out the already existing remote-repo. Otherwise, cabal will
download both indexes and merge them, and we don&#8217;t want this.</p>

<h2 id="the-funny-bit">The funny bit</h2>
<p>Apparently this only helps if your machine is fast enough to process the index
(untarring and all extra administration cabal performs).</p>

<p>Plainly getting the file from the cache:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&gt; wget http://spockz.nl:12080/packages/archive/00-index.tar.gz
</span><span class="line">Saving to: 00-index.tar.gz
</span><span class="line">100%<span class="o">[======================================</span>&gt;<span class="o">]</span> 3.394.821   10,9M/s   in 0,3s
</span><span class="line">2011-11-13 00:12:35 <span class="o">(</span>10,9 MB/s<span class="o">)</span> - 00-index.tar.gz saved <span class="o">[</span>3394821/3394821<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And running cabal update with my cache as source:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">cabal update -v3  7,50s user 0,21s system 99% cpu 7,736 total
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And then finally, with the original repository:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">cabal update -v3  7,57s user 0,25s system 28% cpu 27,372 total
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So here we see that the user time is roughly the same but you spent almost three
times more seconds waiting for your coffee to get cold. Any further speed
improvements for cabal update will probably require optimalisation of the code.</p>

<h2 id="the-caching-server">The caching server</h2>
<p>I&#8217;m using <a href="https://www.varnish-cache.org/" title="Varnish">Varnish</a>
to cache the request to hackage. And here is my config file. Please shoot if you
see any improvements.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># This is a basic VCL configuration file for varnish.  See the vcl(7)</span>
</span><span class="line"><span class="c"># man page for details on VCL syntax and semantics.</span>
</span><span class="line">
</span><span class="line">backend backend_0 <span class="o">{</span>
</span><span class="line">	.host <span class="o">=</span> <span class="s2">&quot;hackage.haskell.org&quot;</span>;
</span><span class="line">	.port <span class="o">=</span> <span class="s2">&quot;80&quot;</span>;
</span><span class="line">	.connect_timeout <span class="o">=</span> 0.4s;
</span><span class="line">	.first_byte_timeout <span class="o">=</span> 300s;
</span><span class="line">	.between_bytes_timeout <span class="o">=</span> 60s;
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">acl purge <span class="o">{</span>
</span><span class="line">  <span class="s2">&quot;localhost&quot;</span>;
</span><span class="line">	<span class="s2">&quot;hackage.haskell.org&quot;</span>;
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">sub vcl_recv <span class="o">{</span>
</span><span class="line">    <span class="nb">set </span>req.grace <span class="o">=</span> 120s;
</span><span class="line">    <span class="nb">set </span>req.backend <span class="o">=</span> backend_0;
</span><span class="line">
</span><span class="line">		<span class="nb">set </span>req.http.host <span class="o">=</span> <span class="s2">&quot;hackage.haskell.org&quot;</span>;
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PURGE&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span>!client.ip ~ purge<span class="o">)</span> <span class="o">{</span>
</span><span class="line">            error 405 <span class="s2">&quot;Not allowed.&quot;</span>;
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span><span class="o">(</span>lookup<span class="o">)</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>req.request !<span class="o">=</span> <span class="s2">&quot;GET&quot;</span> &amp;amp;&amp;amp;
</span><span class="line">        req.request !<span class="o">=</span> <span class="s2">&quot;HEAD&quot;</span> &amp;amp;&amp;amp;
</span><span class="line">        req.request !<span class="o">=</span> <span class="s2">&quot;PUT&quot;</span> &amp;amp;&amp;amp;
</span><span class="line">        req.request !<span class="o">=</span> <span class="s2">&quot;POST&quot;</span> &amp;amp;&amp;amp;
</span><span class="line">        req.request !<span class="o">=</span> <span class="s2">&quot;TRACE&quot;</span> &amp;amp;&amp;amp;
</span><span class="line">        req.request !<span class="o">=</span> <span class="s2">&quot;OPTIONS&quot;</span> &amp;amp;&amp;amp;
</span><span class="line">        req.request !<span class="o">=</span> <span class="s2">&quot;DELETE&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        /* Non-RFC2616 or CONNECT which is weird. */
</span><span class="line">        <span class="k">return</span><span class="o">(</span>pipe<span class="o">)</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>req.request !<span class="o">=</span> <span class="s2">&quot;GET&quot;</span> &amp;amp;&amp;amp; req.request !<span class="o">=</span> <span class="s2">&quot;HEAD&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        /* We only deal with GET and HEAD by default */
</span><span class="line">        <span class="k">return</span><span class="o">(</span>pass<span class="o">)</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>req.http.If-None-Match<span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span><span class="o">(</span>pass<span class="o">)</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>req.url ~ <span class="s2">&quot;createObject&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span><span class="o">(</span>pass<span class="o">)</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    remove req.http.Accept-Encoding;
</span><span class="line">
</span><span class="line">    <span class="k">return</span><span class="o">(</span>lookup<span class="o">)</span>;
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">sub vcl_pipe <span class="o">{</span>
</span><span class="line">    <span class="c"># This is not necessary if you do not do any request rewriting.</span>
</span><span class="line">    <span class="nb">set </span>req.http.connection <span class="o">=</span> <span class="s2">&quot;close&quot;</span>;
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">sub vcl_hit <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PURGE&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        purge_url<span class="o">(</span>req.url<span class="o">)</span>;
</span><span class="line">        error 200 <span class="s2">&quot;Purged&quot;</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>!obj.cacheable<span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span><span class="o">(</span>pass<span class="o">)</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">sub vcl_miss <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>req.request <span class="o">==</span> <span class="s2">&quot;PURGE&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        error 404 <span class="s2">&quot;Not in cache&quot;</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">sub vcl_fetch <span class="o">{</span>
</span><span class="line">    <span class="nb">set </span>beresp.grace <span class="o">=</span> 120s;
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>!beresp.cacheable<span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span><span class="o">(</span>pass<span class="o">)</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>beresp.http.Set-Cookie<span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span><span class="o">(</span>pass<span class="o">)</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>beresp.http.Cache-Control ~ <span class="s2">&quot;(private|no-cache|no-store)&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span><span class="o">(</span>pass<span class="o">)</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span>beresp.http.Authorization &amp;amp;&amp;amp; !beresp.http.Cache-Control ~ <span class="s2">&quot;public&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span><span class="o">(</span>pass<span class="o">)</span>;
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">sub vcl_deliver <span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lhs2TeX-hl version 1.4.5 has been released!]]></title>
    <link href="http://alessandrovermeulen.me/2011/10/15/lhs2tex-hl-version-1.4.5-has-been-released/"/>
    <updated>2011-10-15T00:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2011/10/15/lhs2tex-hl-version-1.4.5-has-been-released</id>
    <content type="html"><![CDATA[<p>I’ve just released a new version of <a href="http://alessandrovermeulen.me/projects/lhs2texhl/" title="lhs2TeX HighLighter ">lhs2TeX-hl</a>: 1.4.5 and it includes some new features:</p>

<ol>
	<li>Added support for recursively traversing includes of .lhs files</li>
	<li>The program now doesn&#8217;t fail completely when haskell-src-exts fails to parse
    a file. An error is reported and the program continues. :) A fmt file is
    still generated.</li>
	<li>functions that aren&#8217;t functions but constants are now given the tag `constant&#8217;</li>
	<li>Removed a faulty command from the list.</li>
	<li>Cleaned up some code. (Probably introduced other ugly code) </li>
	<li>Binary operators are now typeset better. (I hope :))</li>
</ol>

<p>Please let me know what you think.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing vacuum-cairo with the help of HomeBrew]]></title>
    <link href="http://alessandrovermeulen.me/2011/09/19/installing-vacuum-cairo-with-the-help-of-homebrew/"/>
    <updated>2011-09-19T00:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2011/09/19/installing-vacuum-cairo-with-the-help-of-homebrew</id>
    <content type="html"><![CDATA[<p>I tried installing vacuum-cairo on OS X 10.6 but it failed. With the help of <a href="http://mxcl.github.com/homebrew/" title="HomeBrew">HomeBrew</a> I
installed the dependencies by doing the following:</p>

<p>Be sure to run <code>brew update</code> first.</p>

<p>Then install the dependencies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install pkg-config
</span><span class="line">brew install glib
</span><span class="line">brew install librsvg
</span><span class="line">chmod u+w /usr/local/Cellar/gdk-pixbuf/2.23.5/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
</span><span class="line">brew install librsvg
</span><span class="line">brew install pango
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note the installing of librsvg twice, this is in accordance with https://github.com/mxcl/homebrew/issues/4970. If you don’t get an error after running the first install of librsvg you might have a new update brew of librsvg.</p>

<p>And finally install vacuum-cairo:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">cabal install vacuum-cairo
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Applescript script to emulate the behaviour of the `start' command in the windows CMD prompt]]></title>
    <link href="http://alessandrovermeulen.me/2011/07/01/applescript-start-command-windows/"/>
    <updated>2011-07-01T00:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2011/07/01/applescript-start-command-windows</id>
    <content type="html"><![CDATA[<p>People have asked me how to launch a program through the terminal in the
background but with it’s own terminal screen similar to the way the “start”
command in the Windows CMD prompt works. Well here it is. Add the following two
files (start.applescript) and start to your path, and make them executable
(<code>chmod +x {start.applescript,start}</code>).</p>

<p>One point of notice is to <strong>always</strong> encapsulate strings with
spaces that should be one parameter in quotes.</p>

<div><script src="https://gist.github.com/1059096.js?file="></script>
<noscript><pre><code></code></pre></noscript></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell code completion for TextMate]]></title>
    <link href="http://alessandrovermeulen.me/2011/03/26/haskell-code-completion-for-textmate/"/>
    <updated>2011-03-26T00:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2011/03/26/haskell-code-completion-for-textmate</id>
    <content type="html"><![CDATA[<p>Today I released my script for basic code completion support in TextMate.</p>

<p>The package can be found on <a title="The textmatetags package" href="http://hackage.haskell.org/package/textmatetags">hackage</a> and on <a title="Haskell Code Completion for TextMate" href="https://github.com/spockz/Haskell-Code-Completion-for-TextMate">github</a>.</p>

<p>Please read the README for installation instructions. Currently only identifiers
from interpreted source code is available. Future releases will aim at providing
better code completion support by using either Scion or HaskellSrcExts, or both.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generic Text Markup with CSS]]></title>
    <link href="http://alessandrovermeulen.me/2011/03/18/generic-text-markup-with-css/"/>
    <updated>2011-03-18T00:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2011/03/18/generic-text-markup-with-css</id>
    <content type="html"><![CDATA[<p>Most of you are familiar with CSS reset scripts to reset CSS behaviour to
something uniform across several browsers. I have been searching for a good CSS
stylesheet that would do the same for the formatting of my text. That is, to
give the text on a site a markup, suitable for reading. As a great fan of LaTeX
this markup should follow the default markup of LaTeX as closely as possible.</p>

<p>As I could not find such a stylesheet I build my own. It probably is far from
finished, although I tried to cover the most common cases in this script.</p>

<p>In time there will be a git <a href="http://github.com">repository</a> that will
contain test cases and updated versions of this stylesheet.</p>

<p>I tested this script in the presence of the <a title="CSS Tools: Reset CSS" href="http://meyerweb.com/eric/tools/css/reset/">Meyer CSS reset</a>, but it
should also work without any CSS Reset present, or together with other CSS reset
stylesheets.</p>

<p>Please let me know (either by mail or a reply) if you have any remarks!</p>
<div><script src="https://gist.github.com/876971.js?file="></script>
<noscript><pre><code></code></pre></noscript></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UUAG TextMate Bundle released]]></title>
    <link href="http://alessandrovermeulen.me/2011/03/10/uuag-textmate-bundle-released/"/>
    <updated>2011-03-10T00:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2011/03/10/uuag-textmate-bundle-released</id>
    <content type="html"><![CDATA[<p>I’m proud to announce the release of the <a title="GitHub repository of the UUAGC TextMate Bundle" href="https://github.com/spockz/UUAttributeGrammar-TextMate-Bundle">TextMate
bundle</a> for <a title="Utrecht University Attribute Grammar System" href="http://www.cs.uu.nl/wiki/HUT/AttributeGrammarSystem">UUAG</a>. It is
currently very simple and is based on the <a title="Haskell Bundle for TextMate" href="http://weblog.jamisbuck.org/2005/11/1/haskell-bundle-for-textmate">Haskell
TextMate bundle</a> by Jamis Buck.</p>

<p>The only quirk is that you need to add <code>--|</code> after every sem block, otherwise
TextMate will consider everything afterward Haskell code. This token is used to
indicate the end of the Haskell code that officially starts after the <code>=</code>. This
has the effect that every <code>|</code> before every Constructor is coloured blue. If you
want to avoid this, insert <code>--|</code> after every definition.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sem Foo
</span><span class="line">  | Bar lhs.cafe = ...
</span><span class="line">  | Hotel lhs.desk = ...
</span><span class="line">--|
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Happy coding! (<a href="https://github.com/spockz/UUAttributeGrammar-TextMate-Bundle">GitHub repository</a>, develop: <a href="https://github.com/spockz/UUAttributeGrammar-TextMate-Bundle/tarball/master">UUAG.tmbundle.tar.gz</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A note on the versionless HTML]]></title>
    <link href="http://alessandrovermeulen.me/2011/01/22/a-note-on-the-versionless-html/"/>
    <updated>2011-01-22T00:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2011/01/22/a-note-on-the-versionless-html</id>
    <content type="html"><![CDATA[<p>Yesterday WhatWG announced to drop the versioning of HTML. HTML is to be a <a href="http://blog.whatwg.org/html-is-the-new-html5">living standard</a>. This
comes at a very inconvenient time I fear.</p>

<p>Over the past few years web standards have, albeit slowly, developed into some
mature state: Most browsers support the current (x)HTML, CSS and JS standards to
the letter and can do more. However, due to the fact that these standards have
evolved so slowly new developments are not included in these standards. HTML5
(<a href="http://dev.w3.org/html5/spec/Overview.html">W3C</a> and <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/">WhatWG</a>)
solves a lot of these problems, including features like <code>&lt;canvas&gt;</code> and
<code>&lt;video&gt;</code>.</p>

<p>With WhatWG dropping the version number of HTML I foresee a descent back to the
Dark Ages where every browser supported a different standard and supported the
same standards differently, one browser would support feature X and not Y while
the other supports Y but not X. This is a nightmare for developers: not being
able to rely on the uniformity of the browsers of your visitors. This created
necessities as writing specific CSS and JS code for specific browsers to `fix’
certain behaviour. These fixes mostly had to be done for Internet Explorer as it
had at the time by far the largest install base.</p>

<p>Now that we have finally arrived at an era where all browsers support the same
set of rather advanced techniques we decide to drop versions. In some cases it
is not a disaster to not have a version number. Look at CSS, the changes that
have been made to the standard were mostly additions. New operators and new
properties and values have been added. These changes required a better parser,
and the recognition of the new fields, but never did a semantic
<strong>change</strong>. This, together with the tradition that CSS engines
ignore the statements they don’t understand has led to developers being able to
include new techniques in CSS files and thus implicitly setting the version of
the CSS in the file. As nothing changed older and newer browsers behaved the
same at the old statements and only the newer browsers acted on the new
statements. So up to now the absence of explicit CSS versioning didn’t cause any
problems for CSS.</p>

<p>However, with the absence of versions in HTML5 we have a problem. Not only does
the HTML5 standard describe the structure of HTML but it also describes the JS
that the browser should support. These standards are in contrast to CSS subject
to the changing of their semantics. For example, a JavaScript function can get a
different interface: different parameters and/or return values, but also its
semantic proper might change.</p>

<p>This changing of semantics without version numbers causes a new nightmare for
developers, as they have no way to be sure that their site will look the same
across different browsers as they all may support a slightly different
incarnation of the standard and on top of that the developer cannot be sure his
site will look the same in the same browser a month from now, or even the next
day, as the browser can switch to support a newer instance of the standard. As
different versions of the same browser may have different engines that support
different incarnations of the standard you now also have to worry about the
differences between browser versions that your visitors use.</p>

<p>One might notice the presence of a lot of conditions in the above text and think
“What is the fuss, it might all not happen.”. The main argument I would like to
make here is this: a `living’ standard introduces a lot of uncertainties. At a
time where certainties are just starting to come back, giving developers peace
of mind, going back to living with uncertainties is certainly a descent into
Dark Ages in my opinion.</p>

<h3>A solution?</h3>
<p>There is of course a reason why they choose to declare this standard as
`living’. It denotes the fact that the web is evolving on a faster pace than we
are used to, it is quite dynamic. Having to wait several years before you can
use a very nice new feature on your website is not nice, as you would like to
use it as soon as it becomes defined. Therefore, instead of declaring the
standard completely dynamic and deprived of versions, I suggest something like
annual milestones. This way one can still compare browsers on their
capabilities, new features can be expected to be available rather quickly and
most importantly you provide a frame of reference for the developer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lhs2TeX-hl 1.2.2 released]]></title>
    <link href="http://alessandrovermeulen.me/2010/11/23/lhs2tex-hl-1.2.2-released/"/>
    <updated>2010-11-23T00:00:00+00:00</updated>
    <id>http://alessandrovermeulen.me/2010/11/23/lhs2tex-hl-1.2.2-released</id>
    <content type="html"><![CDATA[<p>Changelog:</p>
<ol>
  <li>Classes are written to the format file;</li>
  <li>There should be less &#8220;ambiguous operator&#8221; errors now;</li>
  <li>Removed the Agda dependency as it didn&#8217;t do anything with Agda at all.</li>
</ol>

<p><a href="http://hackage.haskell.org/package/lhs2TeX-hl">Hackage</a>, <a href="https://github.com/spockz/lhs2texhl">GitHub</a>.</p>

]]></content>
  </entry>
  
</feed>
